// Generated by CoffeeScript 1.4.0
(function() {

  window.APP = (function(win, doc) {
    "use strict";

    var Config, Events, Log, Url, defaults, extend, getModuleName, getNamespace, module, namespaceFactory;
    defaults = {
      baseUri: "",
      debug: false,
      stopMethod: "start",
      startMethod: "stop",
      delimiter: "."
    };
    extend = function(obj, src) {
      var key;
      for (key in src) {
        if (src.hasOwnProperty(key)) {
          obj[key] = src[key];
        }
      }
      return obj;
    };
    Config = (function() {
      var config;
      config = extend({}, defaults);
      return {
        get: function(key) {
          if (!key) {
            return config;
          }
          return config[key];
        },
        set: function(key, value) {
          if (typeof key === "object") {
            config = extend(config, key);
          }
          config[key] = value;
          return config;
        }
      };
    })();
    Events = (function() {
      return {
        bind: function(el, e, fn) {
          if (el.addEventListener) {
            return el.addEventListener(e, fn, false);
          } else if (el.attachEvent) {
            return el.attachEvent("on" + e, fn);
          }
        },
        unbind: function(el, e, fn) {
          if (el.removeEventListener) {
            return el.removeEventListener(e, fn, false);
          } else if (el.detachEvent) {
            return el.detachEvent("on" + e, fn);
          }
        }
      };
    })();
    Log = (function() {
      return {
        history: [],
        write: function() {
          var arg, _i, _len;
          for (_i = 0, _len = arguments.length; _i < _len; _i++) {
            arg = arguments[_i];
            Log.history.push(arg);
          }
          if (win.hasOwnProperty(console) && Config.get("debug")) {
            return win.console.log(arguments);
          }
        }
      };
    })();
    Url = (function() {
      var strip;
      strip = function(str) {
        return str.replace(/^\/|\/$/g, "");
      };
      return {
        base: function() {
          var slash;
          if (strip(Config.get("baseUri"))) {
            slash = "/";
          }
          return [win.location.protocol, "//", win.location.host, slash, strip(Config.get("baseUri"))].join("");
        },
        site: function(uri) {
          return [Url.base(), "/", strip(uri)].join("");
        }
      };
    })();
    getModuleName = function(str) {
      return str.split(Config.get("delimiter")).pop();
    };
    getNamespace = function(namespace) {
      return namespaceFactory(namespace.split(Config.get("delimiter")).slice(0, 1).join(Config.get("delimiter")));
    };
    namespaceFactory = function(namespace) {
      var module, obj, _i, _len, _ref;
      obj = win;
      _ref = namespace.split(Config.get("delimiter"));
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        module = _ref[_i];
        obj[module] = obj[module] || {};
        obj = obj[module];
      }
      return obj;
    };
    module = function(namespace, dependencies, callback) {
      var mn, ns;
      if (typeof callback === "undefined") {
        callback = dependencies;
        dependencies = [];
      }
      ns = getNamespace(namespace);
      mn = getModuleName(namespace);
      if (typeof callback === "function") {
        module = callback.apply(this, dependencies);
      } else {
        module = callback;
      }
      ns[mn] = module;
      if (typeof module === "object") {
        ns[mn] = extend(ns[mn] || {}, module);
      }
      return ns[mn];
    };
    win.log = Log.write;
    return {
      module: module,
      Core: {
        Config: Config,
        Events: Events,
        Log: Log,
        Url: Url
      }
    };
  })(window, document);

}).call(this);
