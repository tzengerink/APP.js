// Generated by CoffeeScript 1.4.0
(function() {

  module("APP.Core");

  APP.Core.Config.set("debug", true);

  test("module", function() {
    APP.module("APP.TestModule", [window, document], function(win, doc) {
      return {
        docObj: doc,
        winObj: win,
        start: function() {
          return win.location.href === window.location.href;
        }
      };
    });
    APP.module("APP.TestModule.SubModule", function() {
      return {
        start: function() {
          return true;
        }
      };
    });
    APP.module("APP.TestModule.testMethod", function() {
      return function(str) {
        return str === "test";
      };
    });
    APP.module("APP.TestModule.testVar", 1234);
    APP.module("APP.TestModule.testObject", {
      key: "value"
    });
    expect(5);
    equal(APP.TestModule.start(), true);
    equal(APP.TestModule.SubModule.start(), true);
    equal(APP.TestModule.testMethod("test"), true);
    equal(APP.TestModule.testVar, 1234);
    return deepEqual(APP.TestModule.testObject, {
      key: "value"
    });
  });

  test("start", function() {
    var moduleVar, subModuleVar;
    moduleVar = false;
    subModuleVar = false;
    APP.module("APP.Mod", function() {
      return {
        start: function() {
          return moduleVar = true;
        }
      };
    });
    APP.module("APP.Mod.Sub", function() {
      return {
        start: function() {
          return subModuleVar = true;
        }
      };
    });
    APP.start({
      key: "value"
    });
    expect(3);
    ok(moduleVar);
    ok(subModuleVar);
    return equal(APP.Core.Config.get("key"), "value");
  });

  test("Config", function() {
    expect(4);
    equal(typeof APP.Core.Config.get(), "object");
    equal(typeof APP.Core.Config.get("nonExisting"), "undefined");
    equal(typeof APP.Core.Config.set({
      key: "value"
    }), "object");
    return equal(APP.Core.Config.get("key"), "value");
  });

  test("Log", function() {
    log("test1");
    log("test2");
    expect(1);
    return deepEqual(APP.Core.Log.history, ["test1", "test2"]);
  });

  test("Url", function() {
    var base, testUriOne, testUriTwo;
    testUriOne = "some/long/uri";
    testUriTwo = "/some/long/uri/";
    base = window.location.protocol + "//" + window.location.host + "/" + testUriOne;
    expect(3);
    APP.Core.Config.set({
      baseUri: testUriOne
    });
    equal(APP.Core.Url.base(), base);
    APP.Core.Config.set({
      baseUrl: testUriTwo
    });
    equal(APP.Core.Url.site("/test/"), base + "/test");
    return equal(APP.Core.Url.site("test"), base + "/test");
  });

}).call(this);
